/****** for kfifo ******/
%{
#include <linux/module.h>
#include <net/sock.h> 
#include <linux/netlink.h>
#include <linux/skbuff.h> 
#include <linux/semaphore.h>
#define NETLINK_USER 31

int pid_global;
int flag_init = 0;
struct semaphore sem;
struct sock *nl_sk = NULL;

static void hello_nl_recv_msg(struct sk_buff *skb)
{

    struct nlmsghdr *nlh;
    int pid;
/*   struct sk_buff *skb_out;
    int msg_size;
    char *msg = "Hello from kernel";
    int res;
*/
    _stp_printf(KERN_INFO "Entering: %s\n", __FUNCTION__);

//    msg_size = strlen(msg);

    nlh = (struct nlmsghdr *)skb->data;
    _stp_printf(KERN_INFO "Netlink received msg payload:%s\n", (char *)nlmsg_data(nlh));
    pid = nlh->nlmsg_pid; /*pid of sending process */
    if (flag_init==0){
	pid_global = pid;
	up(&sem);
    	flag_init = 1;
	_stp_printf("flag_init: %d",flag_init);
    }else{
	up(&sem);
	_stp_printf("flag_init up: %d",flag_init);
    }
    
//   _stp_printf(KERN_INFO "Netlink received msg payload PID:%d\n", pid );
/*    _stp_printf("%d\n",pid);
    skb_out = nlmsg_new(msg_size, 0);
    if (!skb_out) {
        _stp_printf(KERN_ERR "Failed to allocate new skb\n");
        return;
    }

    nlh = nlmsg_put(skb_out, 0, 0, NLMSG_DONE, msg_size, 0);
    NETLINK_CB(skb_out).dst_group = 0;
    strncpy(nlmsg_data(nlh), msg, msg_size);

    res = nlmsg_unicast(nl_sk, skb_out, pid);
    if (res < 0)
        _stp_printf(KERN_INFO "Error while sending bak to user\n");
*/
}

static void hello_send(char *msg){
    int pid = pid_global;
    struct nlmsghdr *nlh;
    struct sk_buff *skb_out;
    int msg_size;
    //char *msg = "Hello from kernel";
    int res;

    _stp_printf("pid %d\n",pid);

    msg_size = strlen(msg);

    skb_out = nlmsg_new(msg_size, 0);
    if (!skb_out) {
        _stp_printf(KERN_ERR "Failed to allocate new skb\n");
        return;
    }

    nlh = nlmsg_put(skb_out, 0, 0, NLMSG_DONE, msg_size, 0);
    NETLINK_CB(skb_out).dst_group = 0; 
    strncpy(nlmsg_data(nlh), msg, msg_size);

    res = nlmsg_unicast(nl_sk, skb_out, pid);
    if (res < 0)
        _stp_printf(KERN_INFO "Error while sending bak to user\n");

}

static int hello_init(void)
{
    //nl_sk = netlink_kernel_create(&init_net, NETLINK_USER, 0, hello_nl_recv_msg, NULL, THIS_MODULE);
    struct netlink_kernel_cfg cfg = {
	.groups = 1,
        .input = hello_nl_recv_msg,
    };
    _stp_printf("Entering: %s\n", __FUNCTION__);

    nl_sk = netlink_kernel_create(&init_net, NETLINK_USER, &cfg);
    if (!nl_sk) {
        _stp_printf(KERN_ALERT "Error creating socket.\n");
        return -10;
    }
    sema_init(&sem,0);
    //down(&sem);
    return 0;
}

%}


/*************************/
/****** stap script ******/

probe begin {
	printf("start...\n")		
	func_init()
	sem_wait()
	func_send("hi")
	//sem_print()
}

probe end {
	func_exit()
	printf("[SUCC_MSG] END\n");
}

probe error {	
	func_exit()	
	printf("[ERROR_MSG] ERROR END\n");
}

probe nd_syscall.open{
	if (pid() == target()) next         # skip our own helper process
	if (!target_set_pid(pid())) next    # skip unrelated processes
	printf("open: %s\n", filename)
	func_send(name." ".filename)
	sem_wait()
}


function func_init() %{
	int init_netlink = hello_init();
	if (init_netlink < 0)
		_stp_printf("--- INIT ERROR ---\n");
	_stp_printf("--- INIT FIN ---\n");
%}

function func_exit() %{
    hello_send("Hello");   
    netlink_kernel_release(nl_sk);
    _stp_printf("exiting hello module\n");
%}

function func_send(argmsg)%{
    char *msg = STAP_ARG_argmsg;
    hello_send(msg);
%}

function sem_wait()%{
    down(&sem);
%}
